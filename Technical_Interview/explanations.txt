Question 1:
Q1 uses a partial nested loop, with a efficiency of O((n + 1)(n/2)). Since the words are alphabatized and the letters' ORD are compared to discard uneeded letters for subsequent loops, this reduces the amount of looping. Worst case scenario would be if the t string was 'aaa', where a loops through the entirety of string s,  while the best case scenario would be if the string was 'zzz', as the former would be a full nested loop whereas the latter would be simplified as O(n + 1). In terms of space effiency, there's a singular variable declaration within the outer loop called done. This is to prevent additional letters outside for the first matching letter from being addeed to the new_string variable, which would make the space efficiency come out to O(5 + n).

Question 2:
Q2 similarly uses a nested loop, but conditions must be met in order for the loop to end. Originally, I had implemented a conventional nest loop, but came to a conclusion that finding the pattern while looping once through would increase the efficiency. The best case scenario would be if the input only has a single palindromic substring that's on the short side, worst case would be a word with several longer palindrom. The guess is that the palindroms within a string will generally loop less than half the length of the string itself. In the case of the first test string, 'racecarat', there's 2 substring that would pause the loop to go into a nested loop: 'racecar' and 'ara'. The first one would loop three times, where the latter would loop a single time. Considering the loop starts at index 1 of the string, this string would have an efficiency of O((n-1)(n/2)). As for space effiency, there are 3 variables outside the loop, 4 variable within the outer loop, and 3 variables within the nested loop; coming to a notation of O(3n^2 + 4n +3). The space efficiency ended up being more than the original nested loop that I had implemented for this equation. A compromised made when trying to reduce the time efficiency. 

Question 3:
The solution for this question is divided to 2 sections: the question3 function that takes in the adjacency list, and the Kruskal equation within the graph class that returns the minimum spanning tree. For the question 3 function, the function will loop through the entirety of the dictionary to send the information off into the insert function, while also storing the unique edges into an array for being used into the Kruskal equation. Originally, I had the unique edges function stored with it's own function, but found that the question3 loop could perform both tasks simualtaneously. The big O notation would look like O((n + 3)((n + 3/2) + ((n + 1) +1)). For the loop in the Kruskal function, although it is a O(n^3) set of nested loops, the assumption is that the initial n would be a significantly reduced number of values. This would especially be the case since half the edges would be duplicate values from nodes connected connected from one to the other. For the second loop, all the edges are looped through, are guaranteed to go go through the following condition once before being passed on to the next loop. The inner most loop only has an array of the values used, discarding the unused values. The space complexity for the function would be O(2n^3 + 2n^2 + 4).

Question 4:
Since question 4 has 4 variables that need to go through the function, there is several indivdual sections that need to be executed. This includes going through the root and child's own row, along with their index within other nodes' rows. This way all the connections for each node is accouted for when going down the list. As such, the fucntion question4 has functions that are either a single loop O(n) or a nested loop O(n^2). The main section of this exercise is the search function that takes the input node 1 and 2, and looks for them within the tree. There's a singular loop function that goes through through the tree in the BST format, with 3 conditional statements inside the loop, and 4 statements within the first if function. Each conditional has 1-3 functions, which leaves the efficiency at O(2n). The space efficiency was tricky as I required some of the declarations to be outside the function so that they wouldn't be reset, which lead to having 6 function calls. I had to refactor this code a couple of times so that I wouldn't get a max recursion in Python 2.7. The search function ended up being a notation of O(1), while the search helper function was a O(n).
